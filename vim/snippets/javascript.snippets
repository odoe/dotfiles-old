# Self-executing function
snippet mod
	/*global window, document*/
	!function() {
	 'use strict';

	 ${1}

	 }();
# Define statement
snippet def
	define([
			${1}
			], function(${2}) {

			${3}

			});
# Require statement
snippet req
	require([${1}], function(${2}) {

			${3}

			});
# AMD module
snippet amd
	/*global window, document, console, define, require*/
	 define([
		 ${1}
		 ], function(${2}) {

		 'use strict';

		 ${3}

		 });
# dijit
snippet dijit
	/*global define*/
	define([
	  'dojo/_base/declare',
	  'dojo/_base/lang',
	  'dojo/on',
	  'dojo/topic',
	  //dijit
	  'dijit/_WidgetBase',
	  'dijit/_TemplatedMixin'
	], function(
	  declare, lang,
	  on, topic,
	  _WidgetBase, _TemplatedMixin
	) {

	  'use strict';

	  return declare([
	    _WidgetBase, _TemplatedMixin
	  ], {
	    templateString: '',
	    constructor: function(options) {
	      this.options = options || {};
	      this.set('map', this.options.map);
	    },

	    startup: function() {
	      if (!this.get('map')) {
		this.destroy();
	      }

	      if (this.get('map').loaded) {
		this._init();
	      }, else {
		on.once(this.get('map'), 'load', lang.hitch(this, '_init'));
	      }
	    },

	    _init: function() {
	      this.set('loaded', true),
	      this.emit('load', {});
	    }

	  });
#jsx
snippet jsx
	/** @jsx React.DOM */
	/*jshint ignore:start */

	/*jshint ignore:end */
#reactclass
snippet rcl
	React.createClass({
	  render: function() {}
	});
#reactrendercomponent
snippet rcc
	React.renderComponent(
	  ${1}
	);
# spec module
snippet speca
	/*global define, describe, it, expect, beforeEach, afterEach, sinon*/
	 define([
		 ${1}
		 ], function(${2}) {

		 describe(
			 '${3:Description_of_spec}',
			 function() {
			beforeEach(function() {});
			afterEach(function() {});
			 it(
				 '${4:should_expect_something_to_happen}',
				 function() {

				 ${5}

				 });

			 });

		 });
# spec module
snippet spec
	/*global window, document, console, define, require, describe, it, expect*/
	!function() {
	 'use strict';

	 describe(
		 '${1:Description_of_spec}',
		 function() {

		 it(
			 '${2:should_expect_something_to_happen}',
			 function() {

			 ${3}

			 });

		 });

	}();
# spec describe
snippet desc
	describe(
			'${1:Description_of_spec}',
			function() {

			it(
				'${2:should_expect_something_to_happen}',
				function() {
				${3}
				}
				);

			}
			);
# spec it
snippet it
	it(
			'${1:should_expect_something_to_happen}',
			function() {
			${2}
			}
		);
# for (...) {...}
snippet for
	for (var ${2:i} = 0, len = ${1:Things}.length; $2 < len; $2${3:++}) {
		var ${5:obj} = ${4:$1[$2]};
	}
# for (...) {...} (Google Style Guide http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Tips_and_Tricks#Tips_and_Tricks)
snippet forrr
	for (var ${2:i} = 0, ${1:item}; ($1 = ${3:items}[$2]); $2${4:++}) {
		${5}
	}
# code
snippet @cod
	/**
	 * ${1:Description_of_function}
	 * @return {${2:Return_type}} ${3:comment}
	 */
# params
snippet @par
	/**
	 * ${1:Description_of_function}
	 * @param {${2:Param_type}} ${3:comment}
	 * @return {${4:Return_type}} ${5:comment}
	 */
