set nocompatible

"runtime! autoload/pathogen.vim
"silent! call pathogen#runtime_append_all_bundles()
"silent! call pathogen#helptags()

"call pathogen#infect()

" load the plugin and indent settings for the detected filetype
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'
"My Bundles here
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-vividchalk'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-haml'
Plugin 'tpope/vim-git'
Plugin 'tpope/vim-vinegar'
Plugin 'jgdavey/vim-turbux'
Plugin 'groenewege/vim-less'

Plugin 'michaeljsmith/vim-indent-object'
Plugin 'pangloss/vim-javascript'
Plugin 'swaroopch/vim-markdown-preview'
Plugin 'ervandew/supertab'
Plugin 'timcharper/textile.vim'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
Plugin 'vim-scripts/Align'
Plugin 'scrooloose/syntastic'
Plugin 'ajf/puppet-vim'
Plugin 'derekwyatt/vim-scala'
Plugin 'mattn/gist-vim'
Plugin 'mattn/emmet-vim'
Plugin 'godlygeek/tabular'
Plugin 'Townk/vim-autoclose'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'vim-scripts/searchfold.vim'
Plugin 'Lokaltog/vim-distinguished'
Plugin 'flazz/vim-colorschemes'
Plugin 'endel/vim-github-colorscheme'
Plugin 'altercation/vim-colors-solarized'
Plugin 'noahfrederick/vim-hemisu'
Plugin 'morhetz/gruvbox'
Plugin 'vim-scripts/Auto-Pairs'
Plugin 'jnwhiteh/vim-golang'
Plugin 'mxw/vim-jsx'
Plugin 'elixir-lang/vim-elixir'
Plugin 'raichoo/purescript-vim'
Plugin 'lambdatoast/elm.vim'

" vim-scripts repos
Plugin 'L9'
Plugin 'FuzzyFinder'

" non github repos
Plugin 'git://git.wincent.com/command-t.git'

call vundle#end()

syntax enable
filetype plugin indent on

set t_Co=256
set vb
set number
set nocompatible
set showmatch
set ruler
set nowrap
set hlsearch
set colorcolumn=80
set tabstop=2
set shiftwidth=2
set autoindent
set expandtab
set scrolloff=3
set wildignore+=node_modules
set backupdir=/home/odoe/tmp/
set directory=/home/odoe/tmp/
set nobackup
set nowritebackup
set splitright

set laststatus=2
set timeout timeoutlen=1000 ttimeoutlen=100

"golang
"filetype off
"filetype plugin indent off
"set runtimepath+=$GOROOT/misc/vim
"filetype plugin indent on
"syntax on

set background=dark
"let g:solarized_termcolor=256
colorscheme distinguished
highlight LineNr ctermfg=Red
highlight Comment ctermfg=LightMagenta
if has("gui_running")
  set go-=T
  "set guifont=M+_1mn_light_for_Powerline:h8
  "set guifont=ProggyCleanTT:h12:cASNI
  "set guifont=M+_1mn_light:h18
  set noballooneval
else
  set mouse=a
endif

highlight clear SignColumn
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

autocmd BufNewFile,BufRead *.json set filetype=javascript
autocmd BufRead,BufNewFile *.mml set syntax=javascript
autocmd BufRead,BufNewFile *.result set syntax=xml
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufNewFile,BufRead *._ set filetype=html
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

"autocmd FileType go compiler go

function! LightMode()
  "colorscheme habiLight
  set guifont=Monaco:h8
endfunc

""" FocusMode
function! ToggleFocusMode()
  if (&foldcolumn != 12)
    set laststatus=0
    set numberwidth=10
    set foldcolumn=12
    set columns=80
    set noruler
    set nonumber
    hi FoldColumn ctermbg=none
    hi LineNr ctermfg=0 ctermbg=none
    hi NonText ctermfg=0
  else
    set number
    set laststatus=2
    set numberwidth=4
    set foldcolumn=0
    set ruler
    "execute 'colorscheme ' . g:colors_name
  endif
endfunc
nnoremap <F1> :call ToggleFocusMode()<cr>

let g:syntastic_enable_signs=1
let g:syntastic_disabled_filetypes = ['cpp']
let g:syntastic_javascript_checkers = ['jshint']

let g:gist_clip_command = 'pbcopy'
let g:gist_detect_filetype = 1

"PureScript variables
let g:purescript_indent_if = 3
let g:purescript_indent_case = 5
let g:purescript_indent_let = 4
let g:purescript_indent_where = 6
let g:purescript_indent_do = 3

inoremap <expr><TAB>  pumvisible() ? "<C-n>" : "<TAB>"
map <leader>gu :GundoToggle<CR>

" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

set shell=/bin/bash
map <leader>d :NERDTreeToggle<CR>

let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeIgnore=['\.pyc$', 'CVS', '\~$']
let NERDTreeHijackNetrw=1

let g:ackprg = 'ag --nogroup --nocolor --column'

let g:ctrlp_extensions = ['line', 'funky']
nnoremap <Leader>fu :CtrlPFunky<Cr>

" Show syntax highlighting groups for word under cursor
nmap <C-S-A> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

if has("eval")
function! SL(function)
  if exists('*'.a:function)
    return call(a:function,[])
  else
    return ''
  endif
endfunction
endif

set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%{SL('fugitive#statusline')}%{SL('SyntasticStatuslineFlag')}%*%=%-14.(%l,%c%V%)\ %P
