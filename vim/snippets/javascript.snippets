# Self-executing function
snippet mod
	/*global window, document*/
	!function() {
	 'use strict';

	 ${1}

	 }();
# Define statement
snippet def
	define([
			${1}
			], function(${2}) {

			${3}

			});
# Require statement
snippet req
	require([${1}], function(${2}) {

			${3}

			});
# AMD module
snippet amd
	/*global window, document, console, define, require*/
	 define([
		 ${1}
		 ], function(${2}) {
		 
		 'use strict';

		 ${3}

		 });
# dijit
snippet dijit
	  /*global define*/
	  /*jshint strict:false, laxcomma:true*/
	  define([
	    'dojo/_base/declare',
	    'dojo/_base/lang',
	    'dojo/query',
	    'dojo/topic',
	    // Dijit stuff
	    'dijit/_WidgetBase',
	    'dijit/_TemplatedMixin',
	    // template
	    'text!widgets/${1}/${2}.tpl.html',
	  ], function(
		declare, lang,
		topic, query,
		_WidgetBase, _TemplatedMixin,
		template
		) {

		function stopEvent(e) {
		  e.preventDefault();
		}

		function head(t) {
		  return t[0];
		}

		function val(t, name) {
		  return t[name];
		}

		function domval(name) {
		  return val(head(query(name)), 'value');
		}
	    return declare([_WidgetBase, _TemplatedMixin], {

	      templateString: template,

	      options: {},

	      loaded: false,

	      // lifecycle 1
	      constructor: function(options, srcRefNode) {

		// mix in settings and defaults
		declare.safeMixin(this.options, options);

		// widget node
        if (srcRefNode) {
          this.domNode = srcRefNode;
          this.hasDomRef = true;
        }

        this.set('map', this.options.map);

	      },

	      // start widget
	      startup: function() {
		this._init();
	      },
		  
		  postCreate: function() {
			if (!this.hasDomRef) {
			  document.body.insertBefore(this.domNode, document.body.firstChild);
			}

			this.own();
		  },

	      // cleanup
	      destroy: function() {
		this.inherited(arguments);
	      },

	      // widget methods

	      // private functions
	      _init: function() {
		this.set('loaded', true);
	      }

	    });

	  });
# spec module
snippet speca
	/*global window, document, console, define, require, describe, it, expect*/
	 define([
		 ${1}
		 ], function(${2}) {

		 describe(
			 '${3:Description_of_spec}',
			 function() {

			 it(
				 '${4:should_expect_something_to_happen}',
				 function() {

				 ${5}

				 });

			 });

		 });
# spec module
snippet spec
	/*global window, document, console, define, require, describe, it, expect*/
	!function() {
	 'use strict';

	 define([
		 ${1}
		 ], function(${2}) {

		 describe(
			 '${3:Description_of_spec}',
			 function() {

			 it(
				 '${4:should_expect_something_to_happen}',
				 function() {

				 ${5}

				 });

			 });

		 });

	}();
# spec describe
snippet desc
	describe(
			'${1:Description_of_spec}',
			function() {

			it(
				'${2:should_expect_something_to_happen}',
				function() {
				${3}
				}
				);

			}
			);
# spec it
snippet it
	it(
			'${1:should_expect_something_to_happen}',
			function() {
			${2}
			}
		);
# for (...) {...}
snippet for
	for (var ${2:i} = 0, len = ${1:Things}.length; $2 < len; $2${3:++}) {
		var ${5:obj} = ${4:$1[$2]};
	}
# for (...) {...} (Google Style Guide http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Tips_and_Tricks#Tips_and_Tricks)
snippet forrr
	for (var ${2:i} = 0, ${1:item}; ($1 = ${3:items}[$2]); $2${4:++}) {
		${5}
	}
# code
snippet @cod
	/**
	 * ${1:Description_of_function}
	 * @return {${2:Return_type}} ${3:comment}
	 */
# params
snippet @par
	/**
	 * ${1:Description_of_function}
	 * @param {${2:Param_type}} ${3:comment}
	 * @return {${4:Return_type}} ${5:comment}
	 */
